jpsType: update
id: geo-galera-manager
name: Geo Galera Cluster Manager
description: Geo Galera Cluster Manager
baseUrl: https://raw.githubusercontent.com/sych74/galera-multiregion-cluster/main

globals:
  master_env_name: ${settings.master_env_name}
  db_cluster_url: ${settings.db_cluster_url}
  galera_server_id: ${settings.galera_server_id}
  galera_segment_id: ${settings.galera_segment_id}
  db_user: ${settings.db_user}
  db_pass: ${settings.db_pass}
  install_galera_cluster: ${settings.install_galera_cluster:false}
  update_galera_cluster: ${settings.update_galera_cluster:false}
  start_galera_cluster: ${settings.start_galera_cluster:false}
  restart_galera_cluster: ${settings.restart_galera_cluster:false}

onInstall:
  - getClusterEnvs
  - getGaleraNodesAddress
  - setGlobals:
      galera_nodes_address: ${response.galera_nodes_address}
  - if ('${globals.install_galera_cluster}' == 'true'):
    - installGaleraCluster
    - bootstrapGaleraCluster
    - startGaleraCluster

actions:
  getClusterEnvs:
    - script: ${baseUrl}/scripts/getClusterEnvs.js
      envName: ${env.name}
    - setGlobals:
        nextIndex: ${response.nextIndex}
        clusterEnvs: ${response.items.join(,)}

  getGaleraNodesAddress:
    - script: |
        var envs = '${globals.clusterEnvs}'.split(','),
            actions = [],
            galera_nodes_address = "";
        for (var i = 0, n = envs.length; i < n; i ++) {
          var resp = jelastic.env.control.GetEnvInfo(envs[i], session);
          if (resp.result != 0) return resp;
          for (var l = 0, k = resp.nodes; l < k.length; l++) {
            if (k[l].nodeGroup == 'sqldb') {
              galera_nodes_address += k[l].address + ",";
            }
          }
        }
        galera_nodes_address = galera_nodes_address.slice(0, -1);
        return { result: 0, galera_nodes_address: galera_nodes_address }

  installGaleraCluster:
    - script: |
        var envs = '${globals.clusterEnvs}'.split(','),
            actions = [];
        for (var i = 0, n = envs.length; i < n; i ++) {
          actions.push({
            jps: "${baseUrl}/scripts/geoGalera.jps?_r=${fn.random}",
            envName: envs[i],
            settings: {
              path: "${globals.db_cluster_url}",
              galera_server_id: "${globals.galera_server_id}",
              galera_segment_id: i,
              db_user: "${globals.db_user}",
              db_pass: "${globals.db_pass}",
              install_galera_cluster: "true",
              galera_nodes_array: "${globals.galera_nodes_address}"
            }  
          });
        }
        return { result: 0, onAfterReturn: { install: actions } };

  bootstrapGaleraCluster:
    - install:
        jps: ${baseUrl}/scripts/geoGalera.jps?_r=${fn.random}
        envName: ${globals.master_env_name}
        settings:
          bootstrap_galera_cluster: true
          
  startGaleraCluster:
    - script: |
        var envs = '${globals.clusterEnvs}'.split(','),
            actions = [];
        for (var i = 0, n = envs.length; i < n; i ++) {
          if (envs[i] != "${globals.master_env_name}"){
            actions.push({
              jps: "${baseUrl}/scripts/geoGalera.jps?_r=${fn.random}",
              envName: envs[i],
              settings: {
                start_galera_cluster: "true"
              }
            });
          }
        }
        return { result: 0, onAfterReturn: { install: actions } };
