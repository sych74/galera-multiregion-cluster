type: install
name: MariaDB Multi-Region Galera Cluster
id: multiregion-galera-cluster
jpsVersion: '1.5.2'
description:
  text: A MariaDB Galera cluster that can be deployed across several regions.
  short: MariaDB Multi-Region Galera cluster.
logo: /images/mariadb-multi-logo.png

categories:
  - apps/clustered-dbs
  - apps/popular
  - apps/clusters

baseUrl: https://raw.githubusercontent.com/sych74/galera-multiregion-cluster/main

settings:
  fields:
    - caption: Regions
      type: regionlist
      name: regions
      disableInactive: true
      selectFirstAvailable: false
      multiSelect: true
      required: true
      min: 3
      max: 5
    
    - type: dockertags
      caption: Database version
      nodeType: mariadb-dockerized
      name: tag
      hidden: false

    - caption: Topology
      type: list
      name: topology
      default: standalone
      required: true
      values:        
        - value: standalone
          caption: Based on MariaDB standalone across regions
        - value: cluster
          caption: Based on MariaDB Galera cluster across regions

    - caption: None
      inputType: hidden
      hidden: true
      type: list
      name: nodes
      dependsOn:                 
        topology:
            standalone:
              - value: 1
            cluster:    
              - value: 3

    - type: checkbox
      name: is_proxysql
      caption: Add ProxySQL for SQL Load Balancing
      value: true      

    - type: separator

    - caption: Environment
      type: envname
      name: envName
      dependsOn: region
      randomName: true
      showFullDomain: false
      required: true
      
    - type: string
      name: displayName
      caption: Display Name
      default: MariaDB Galera Cluster

globals:
  db_cluster_url: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/v3.0.0
  db_user: admin-${fn.random}
  db_pass: ${fn.password(10)}
  repl_user: repl-${fn.random}
  repl_pswd: ${fn.password(10)}
  orch_user: orch-${fn.random}
  orch_pswd: ${fn.password(10)}
  galera_server_id: ${fn.random}
  
onInstall:
  - initGlobals
  - env.group.CreateGroup:
      envGroup: "Database cluster ${settings.envName}"
  - createEnvs
  - getClusterEnvs
  - setupClusters
  
actions:
  initGlobals:
    - script: |
        var regions = '${settings.regions}'.split(','), index, resp,
            onAfterReturn = { setGlobals: {} }, 
            glbs = onAfterReturn.setGlobals;
        resp = jelastic.env.control.GetRegions(appid, session);
        if (resp.result != 0) return resp;
        resp = resp.array;
        for (var i = 0, n = regions.length; i < n; i ++) {
          index = i + 1;
          glbs["region-" + index] = regions[i];
          for (var a = 0, b = resp.length; a < b; a++) {
            for (var k = 0, l = resp[a].hardNodeGroups.length; k < l; k++) {
              if (resp[a].hardNodeGroups[k].uniqueName == regions[i]) {
                glbs["domain-" + index] = resp[a].domain;
                glbs["regionName-" + index] = resp[a].displayName;
              }
            }
          }
        }
        return { result: 0, onAfterReturn: onAfterReturn };

  createEnvs:
    - script: |
        var regions = '${settings.regions}'.split(','), actions = [];
        for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
          actions.push({
            jps: "${baseUrl}/scripts/sqldb.jps?_r=${fn.random}",
            envName: "${settings.envName}-db-" + cluster,
            loggerName: "${settings.envName}-db-" + cluster,
            envGroups: "Database cluster ${settings.envName}",
            region: "${globals.region-" + cluster + "}",
            settings: {
              "repl_user": "${globals.repl_user}",
              "repl_pswd": "${globals.repl_pswd}",
              "tag": "${settings.tag}",
              "nodes": "${settings.nodes}"
            }
          });
          if ('${settings.is_proxysql}' == 'true') {
            actions.push({
              jps: "${baseUrl}/scripts/proxysql.jps?_r=${fn.random}",
              envName: "${settings.envName}-lb-" + cluster,
              loggerName: "${settings.envName}-lb-" + cluster,
              envGroups: "Database cluster ${settings.envName}",
              region: "${globals.region-" + cluster + "}",
              settings: {
                "db_user": "${globals.db_user}",
                "db_pass": "${globals.db_pass}",
                "orch_user": "${globals.orch_user}",
                "orch_pswd": "${globals.orch_pswd}",
              }
            });
          }
        }  
        return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };

  setupClusters:
    - script: |
        var ProxySQLEnvs = '${globals.ProxySQLEnvs}'.split(','), actions = [];;
        for (var i = 0, n = ProxySQLEnvs.length; i < n; i ++) {
          actions.push({
            jps: "${baseUrl}/scripts/geoProxyManager.jps?_r=${fn.random}",
            envName: ProxySQLEnvs[i],
            settings: {
              "env_name": "${settings.envName}"
            }
          });
        }
        actions.push({
          jps: "${baseUrl}/scripts/geoGaleraManager.jps?_r=${fn.random}",
          envName: "${settings.envName}-db-1",
          settings: {
            "master_env_name": "${settings.envName}-db-1",
            "db_cluster_url": "${globals.db_cluster_url}",
            "db_user": "${globals.db_user}",
            "db_pass": "${globals.db_pass}",
            "galera_server_id": "${globals.galera_server_id}",
            "install_galera_cluster": "true"
          }
        });       
        return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };          

  getClusterEnvs:
    - script: ${baseUrl}/scripts/getClusterEnvs.js
      envName: ${settings.envName}-db-1
    - setGlobals:
        DBEnvs: ${response.items.join(,)}
    - script: ${baseUrl}/scripts/getClusterEnvs.js
      envName: ${settings.envName}-lb-1
    - setGlobals:
        ProxySQLEnvs: ${response.items.join(,)}

success:
  email: /success/success.md?_r=${fn.random}
  text: /success/success.md?_r=${fn.random}
